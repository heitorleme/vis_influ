import pandas as pd
import numpy as np
import streamlit as st
import json
import io
from datetime import datetime
from scipy.stats import norm
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import requests
import traceback

# Dicion√°rio de tradu√ß√£o dos interesses
interests_translation = {
	"Activewear": "Roupas Esportivas",
	"Friends, Family & Relationships": "Amigos, Fam√≠lia e Relacionamentos",
	"Clothes, Shoes, Handbags & Accessories": "Moda",
	"Beauty & Cosmetics": "Beleza e Cosm√©ticos",
	"Camera & Photography": "Fotografia",
	"Toys, Children & Baby": "Brinquedos, Crian√ßas e Beb√™s",
	"Television & Film": "Televis√£o e Filmes",
	"Restaurants, Food & Grocery": "Restaurantes e Gastronomia",
	"Music": "M√∫sica",
	"Fitness & Yoga": "Fitness e Yoga",
	"Travel, Tourism & Aviation": "Turismo e Avia√ß√£o",
	"Pets": "Animais de Estima√ß√£o",
	"Cars & Motorbikes": "Carros e Motocicletas",
	"Beer, Wine & Spirits": "Cerveja, Vinho e Bebidas Alco√≥licas",
	"Art & Design": "Arte e Design",
	"Sports": "Esportes",
	"Electronics & Computers": "Eletr√¥nicos e Computadores",
	"Healthy Lifestyle": "Estilo de Vida Saud√°vel",
	"Shopping & Retail": "Compras e Varejo",
	"Coffee, Tea & Beverages": "Caf√©, Ch√° e Bebidas Quentes",
	"Jewellery & Watches": "Joias e Rel√≥gios",
	"Luxury Goods": "Artigos de Luxo",
	"Home Decor, Furniture & Garden": "Decora√ß√£o, M√≥veis e Jardim",
	"Wedding": "Casamento",
	"Gaming": "Jogos Digitais",
	"Business & Careers": "Neg√≥cios e Carreiras",
	"Healthcare & Medicine": "Sa√∫de e Medicina"
}

abas = st.tabs(["P√°gina Inicial üè†", "Resumo üìÑ", "Influencer üë§", "Audi√™ncia üìä", "Publica√ß√µes üìù"])

with abas[0]:
	st.title("An√°lise de influenciadores")
	st.markdown("### Introdu√ß√£o")
	st.markdown('''Este app tem a fun√ß√£o de consolidar o processo de extra√ß√£o de dados de influenciadores anteriormente 
 				implementado manualmente, caso a caso. O resumo tradicionalmente disponibilizado est√° dispon√≠vel na aba
	 			Resumo, com a op√ß√£o de download direto de um arquivo Excel. Separamos e adicionamos, ainda, dados e visualiza√ß√µes
	 			relativas ao Influencer, √† Audi√™ncia e √†s Publica√ß√µes √†s outras abas.''')

	st.markdown("### Como utilizar")
	st.markdown('''Os arquivos de input devem ser arquivos .json extra√≠dos
 				diretamente do IMAI. Para o processo ser bem-sucedido, os arquivos devem ser nomeados no formato
	 			json_{perfil do influenciador}.json. Para j√°, apenas a an√°lise dos perfis do Instagram √© funcional.''')

	# Upload de m√∫ltiplos arquivos JSON
	st.markdown("### Uploader")
	uploaded_files = st.file_uploader("Carregue os arquivos JSON dos influencers", type="json", accept_multiple_files=True)
	
	# Inicializa√ß√£o
	influencers = []
	ficheiros = []
	
	if uploaded_files:
		for file in uploaded_files:
			if "desktop.ini" in file:
				continue
			else:
				ficheiros.append(file)
				partes = file.split("_")
				if len(partes) > 1:  # Verifica se h√° pelo menos dois elementos ap√≥s o split
					influencers.append(partes[1][:-5])
				else:
					print(f"Aviso: O arquivo '{file}' n√£o segue o padr√£o esperado.")
		influencers_ficheiros = dict(zip(influencers, ficheiros))
		st.session_state["influencers_ficheiros"] = influencers_ficheiros

		dados_brutos = {}

		for influencer, arquivo_json in influencer_ficheiros.items():
			try:
				with open(arquivo_json, "r", encoding="utf-8") as arquivo:
					dados_brutos[influencer] = json.load(arquivo)
			except:
				print("Erro ao processar o arquivo para o influenciador {}".format(influencer))
		st.session_state["dados_brutos"] = dados_brutos
		
	else:
		st.info("Por favor, carregue arquivos JSON para come√ßar.")
